set-window-option -g mode-mouse on
set -g history-limit 10000

set -g default-terminal "screen-256color-italic"
set -as terminal-overrides ',xterm*:sitm=\E[3m'

set -g set-clipboard on

set -g renumber-windows on

set-option -g base-index 1

setw -g monitor-acitity on
set -g visual-activity on
set -g mode-keys vi

set -g repeat-time 0

bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

# vim键在不同面板间切换
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# 设置窗口标签的前景及背景色
setw -g window-status-fg colour72
setw -g window-status-bg colour234
setw -g window-status-attr dim

# 设置窗口分割的边框颜色
set -g pane-border-fg green
set -g pane-border-bg black

# 设置当前窗口分割的边框颜色
set -g pane-active-border-fg white
set -g pane-active-border-bg yellow

# 设置提示信息的前景及背景色
set -g message-fg colour250
set -g message-bg colour232
set -g message-attr bright

#set -g set-titles-string '#T'

###################  状态栏设置  ###############################
# 以下色彩为mac环境下，Linux下可能需重新设置颜色
# 设置状态栏前景色，背景色
#set -g status-fg white
#set -g status-bg black

# 设置状态栏前景及背景色
set -g status-bg colour236
set -g status-fg colour68

# 设置状态栏左部宽度  默认为10
set -g status-left-length 35
# 设置状态栏左部显示内容。
set -g status-left "#[fg=colour252,bold,bg=colour243] 🌺  S: #S #[fg=colour250,bg=colour239] 🏵  W: #I #[fg=yellow,bg=colour237] ☘ #[fg=colour250,bg=colour237] P: #P#[default]"
# 设置状态栏右部宽度
set -g status-right-length 48
# 设置状态栏右部内容，这里设置为时间信息
set -g status-right "#[fg=colour251,bold,bg=colour237] 🗓  %Y-%b-%d #[fg=colour251,bold,bg=colour239] ⏱  %R #[fg=colour251,bold,bg=colour243] 🐳  #(ifconfig | grep 'inet.*netmask.*broadcast' | awk '{print $2}')"
# 窗口信息居中显示
set -g status-justify centre
# 设置状态栏更新时间 每60秒更新一次，默认是15秒更新
set -g status-interval 60

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
